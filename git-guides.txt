GITHUB GUIDE v1.6.10
by jamil linzag

i would update  this time to time,  once i encounter a specific git issue....

to use git make sure you have git downloaded in your device
to check if you have git in your device:	
1. open your cmd:
enter: git

if (it output a bunch of commands){
then you git installed in your device
} else{
then you dony have git installed in your device
}

reminder: 
1. Git and Github are different. Git is a terminal command and Github is a website
2. upon downloading Git.. you'll get a package of git bash. it work similarly with cmd but with colors
3. you can use cmd or gitbash when inputting your code.
4. its a good habit to push your code to git when its working properly.

comon uses:
1. taking the code from git repository.
- git clone <remote_repository_url>
				//this will make a replicate to repo link you just copied

2. taking your local folder to git repository
you'll need to follow these steps:
//1. Open a terminal window and navigate to the local folder.
				//or contact me so i can tell you the fastest way to locate a directory with cmd. 
you want to add to the repository.
//2. Initialize the folder as a Git repository by running the following command:
- git init			//Add the files in the folder to the repository's staging area by running:
- git add .			//Commit the files to the repository by running:
- git commit -m "Initial commit"//If you want to push the repository to a remote server (e.g., GitHub), you'll 
				//need to add a remote reference and then push the repository to that remote. 
				//You can do this by running the following commands:
- git remote add origin <remote_repository_url>	
				//if you dont have a remote repository link then. create a repository from 
				//github. it will provite you with a remote repository link which you wil use 
				//in your git commands. 
- git push -u origin main	//That's the basic process for adding a local folder to a 
				//Git repository. If you have any questions or run into any 								//issues, don't hesitate to ask for help.

NOTE. in the past. the first branch name you'll get
in creating a repository is "master". then it change into 
"main". but you can still use "master" for preferences.
you can change it when creating a repo.

3. editing/ changing/ updating your code on github.
first you check code status (if things are in track)
- git status			// it will show you all the files that has been changed
				// if you wanna setup those files to be saved in github...
- git add . 			//add a dot (.) if you wanna select all of those files
- git add -all 			//works the same with dot
- git add (name of the file)	//if you wanna send a specific file
- git commit -m "first commit"	//you can chenge the "first commit" anything.
- git push -u origin main	//push is the call sign to "push" code into github repository

NOTE.... if you wanna push your progress 
		to a different branch
- git branch -m <branch>	//this branching system are for version control
				//example. if you put "branch2", then it will create a branch "branch2" in your repository
				

NOTW:   branch/ branching
is a version control method, when you want to keep differend versions of your code.
meaning you want to keep the old version while working on with the latest version,
common branch names:

master	main	sub	first	second	third

4. when you want to pull from a remote repository
-git pull	//to get all branch from the remote...
-git checkout --track origin/<branch name>

WARNIN.. you must save your current progress in your 
current repo before switching to other repo 

git branch -a   	//to see all repo branch




warning list/ threatment/ meaning
git add .
warning: LF will be replaced by CRLF in app/src/main/res/values/strings.xml.
The file will have its original line endings in your working directory
error:
cause:
solution:


git commit "initial commit"
error: pathspec 'initial commit' did not match any file(s) known to git
cause: you forgot to add "-m"
solution: git commit -m "initial commit"
